name: Terraform Infrastructure Deployment and EKS Deployment

on:
  workflow_dispatch:
    inputs:
      action:
        description: 'Choose whether to apply, destroy, deploy infrastructure'
        required: true
        default: 'apply'
        type: choice
        options:
          - apply
          - destroy
          - deploy

jobs:
  terraform:
    runs-on: ubuntu-latest
    outputs:
      tfplanExitCode: ${{ steps.tf-plan.outputs.exitcode }}
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Set up AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_wrapper: false

      - name: Terraform Init
        run: terraform init

      # - name: Terraform Format
      #   run: terraform fmt -check

      - name: Terraform Plan
        id: tf-plan
        run: |
          export exitcode=0
          terraform plan -detailed-exitcode -no-color -out tfplan || export exitcode=$?
          echo "exitcode=$exitcode" >> $GITHUB_OUTPUT
          if [ $exitcode -eq 1 ]; then
            echo "Terraform Plan Failed!"
            exit 1
          fi
          
      - name: Publish Terraform Plan
        uses: actions/upload-artifact@v4
        with:
          name: tfplan
          path: tfplan

      - name: Create String Output
        id: tf-plan-string
        run: |
          TERRAFORM_PLAN=$(terraform show -no-color tfplan)
          delimiter="$(openssl rand -hex 8)"
          echo "summary<<${delimiter}" >> $GITHUB_OUTPUT
          echo "## Terraform Plan Output" >> $GITHUB_OUTPUT
          echo "<details><summary>Click to expand</summary>" >> $GITHUB_OUTPUT
          echo '```terraform' >> $GITHUB_OUTPUT
          echo "$TERRAFORM_PLAN" >> $GITHUB_OUTPUT
          echo '```' >> $GITHUB_OUTPUT
          echo "</details>" >> $GITHUB_OUTPUT
          echo "${delimiter}" >> $GITHUB_OUTPUT

      - name: Publish Terraform Plan to Task Summary
        env:
          SUMMARY: ${{ steps.tf-plan-string.outputs.summary }}
        run: echo "$SUMMARY" >> $GITHUB_STEP_SUMMARY

      - name: Push Terraform Output to PR
        if: github.ref != 'refs/heads/main'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GH_PAT }}
          script: |
            const body = `${process.env.SUMMARY}`;
            github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: body
            })

  terraform-apply:
    name: 'Terraform Apply'
    if: github.ref == 'refs/heads/main' && needs.terraform.outputs.tfplanExitCode == 2
    runs-on: ubuntu-latest
    environment: production
    needs: terraform
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform Init
        run: terraform init

      - name: Download Terraform Plan
        uses: actions/download-artifact@v4
        with:
          name: tfplan

      - name: Terraform Apply
        run: terraform apply -auto-approve tfplan
        env:
          TF_VAR_cluster_name: ${{ secrets.TF_VAR_CLUSTER_NAME }}

  deploy:
    runs-on: ubuntu-latest
    needs: terraform
    if: github.event.inputs.action == 'deploy' || github.event.inputs.action == 'apply' || github.event.inputs.action == 'destroy'
    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Set up AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}

      - name: Set up Docker Buildx
        if: github.event.inputs.action == 'deploy'
        uses: docker/setup-buildx-action@v2

      - name: Log in to Amazon ECR
        if: github.event.inputs.action == 'deploy'
        run: |
          aws ecr get-login-password --region ${{ secrets.AWS_DEFAULT_REGION }} |
          docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_DEFAULT_REGION }}.amazonaws.com

      - name: Build Docker image
        if: github.event.inputs.action == 'deploy'
        run: |
          VERSION="1.0.0"
          TIMESTAMP=$(date +%Y%m%d%H%M%S)
          IMAGE_TAG="${VERSION}-${TIMESTAMP}"
          docker build -t ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_DEFAULT_REGION }}.amazonaws.com/my-python-app:$IMAGE_TAG .
          docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_DEFAULT_REGION }}.amazonaws.com/my-python-app:$IMAGE_TAG

      - name: Update deployment.yaml with new image tag
        if: github.event.inputs.action == 'deploy'
        run: |
          VALUES_FILE="k8s/deployment.yaml"
          echo "Updating deployment.yaml with new image tag: ${IMAGE_TAG}"
          sed -i "s|repository:.*|repository: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_DEFAULT_REGION }}.amazonaws.com/my-python-app|g" $VALUES_FILE
          sed -i "s|image: \".*:\(.*\)\"|image: \"${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_DEFAULT_REGION }}.amazonaws.com/my-python-app:$IMAGE_TAG\"|g" $VALUES_FILE

      - name: Commit and push changes to values.yaml
        if: github.event.inputs.action == 'deploy'
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git remote set-url origin https://x-access-token:${{ secrets.GH_PAT }}@github.com/kpavankalyan534/terraform-eks.git
          git add k8s/deployment.yaml
          git commit -m "Update Docker image tag in values.yaml to $IMAGE_TAG"
          git push
        env:
          GITHUB_TOKEN: ${{ secrets.GH_PAT }}

      - name: Set up Kubeconfig for EKS
        run: |
          aws eks --region ${{ secrets.AWS_DEFAULT_REGION }} update-kubeconfig --name ${{ secrets.TF_VAR_CLUSTER_NAME }}

      - name: Deploy Application
        if: github.event.inputs.action == 'deploy'
        run: |
          kubectl apply -f k8s/deployment.yaml
        working-directory: ./

      - name: Wait for LoadBalancer to be provisioned
        if: github.event.inputs.action == 'deploy'
        run: |
          export ELB_DNS=$(kubectl get svc python-app-service -n default -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
          echo "ELB DNS name: $ELB_DNS"
          echo "ELB_DNS=$ELB_DNS" >> $GITHUB_ENV

      - name: Clone the repository to update DNS record
        if: github.event.inputs.action == 'deploy'
        run: |
          sed -i "s|records = \[.*\]|records = [\"${{ env.ELB_DNS }}\"]|g" terraformfiles/dns.tf

      - name: Set up Terraform for DNS Update
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.4.6

      - name: Apply Terraform Changes to Update CNAME Record
        if: github.event.inputs.action == 'deploy'
        run: |
          terraform init
          terraform plan -out=tfplan
          terraform apply -auto-approve

      - name: Terraform Destroy
        if: github.event.inputs.action == 'destroy'
        run: |
          terraform init
          terraform plan -out=tfplan
          terraform destroy -auto-approve
        env:
          TF_VAR_cluster_name: ${{ secrets.TF_VAR_CLUSTER_NAME }}
