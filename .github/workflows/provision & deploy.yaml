name: Terraform Infrastructure Deployment and EKS Deployment

on:
  workflow_dispatch:
    inputs:
      action:
        description: 'Choose whether to apply, destroy, deploy infrastructure'
        required: true
        default: 'apply'
        type: choice
        options:
          - apply
          - destroy
          - deploy

jobs:
  terraform:
    runs-on: ubuntu-latest
    outputs:
      no_changes: ${{ steps.check_changes.outputs.no_changes }}
    steps:
      - name: Check out repository
        uses: actions/checkout@v2

      - name: Set up AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.4.6

      - name: Check if Terraform Plan has changes
        id: check_changes
        run: |
          terraform init
          ls -lart
          terraform refresh
          ls -lart
          terraform plan -out=tfplan
          ls -lart

      - name: Terraform Apply
        if: github.event.inputs.action == 'apply'
        run: |
          ls
          terraform apply -auto-approve ./tfplan
        env:
          TF_VAR_cluster_name: ${{ secrets.TF_VAR_CLUSTER_NAME }}

  deploy:
    runs-on: ubuntu-latest
    needs: terraform
    if: github.event.inputs.action == 'deploy' || github.event.inputs.action == 'apply' || github.event.inputs.action == 'destroy'

    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Set up AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}

      - name: Set up Docker Buildx
        if: github.event.inputs.action == 'deploy'
        uses: docker/setup-buildx-action@v2

      - name: Log in to Amazon ECR
        if: github.event.inputs.action == 'deploy'
        run: |
          aws ecr get-login-password --region ${{ secrets.AWS_DEFAULT_REGION }} |
          docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_DEFAULT_REGION }}.amazonaws.com

      - name: Build Docker image
        if: github.event.inputs.action == 'deploy'
        run: |
          VERSION="1.0.0"
          TIMESTAMP=$(date +%Y%m%d%H%M%S)
          IMAGE_TAG="${VERSION}-${TIMESTAMP}"
          IMAGE_URI="${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_DEFAULT_REGION }}.amazonaws.com/my-python-app:$IMAGE_TAG"
          
          # Build and push the Docker image to ECR
          docker build -t $IMAGE_URI .
          docker push $IMAGE_URI

          # Set IMAGE_URI as an environment variable for later steps
          echo "IMAGE_URI=$IMAGE_URI" >> $GITHUB_ENV

      - name: Update deployment.yaml with new image tag
        if: github.event.inputs.action == 'deploy'
        run: |
          VALUES_FILE="k8s/deployment.yaml"
          echo "Updating deployment.yaml with new image tag: $IMAGE_URI"
          
          # Update the image tag in the YAML file to the new image URI
          sed -i "s|image: \".*\"|image: \"$IMAGE_URI\"|g" $VALUES_FILE

      - name: Commit and push changes to deployment.yaml
        if: github.event.inputs.action == 'deploy'
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git remote set-url origin https://x-access-token:${{ secrets.GH_PAT }}@github.com/kpavankalyan534/terraform-eks.git
          git add k8s/deployment.yaml
          git commit -m "Update Docker image tag in deployment.yaml to $IMAGE_URI"
          git push
        env:
          GITHUB_TOKEN: ${{ secrets.GH_PAT }}

      - name: Set up Kubeconfig for EKS
        run: |
          aws eks --region ${{ secrets.AWS_DEFAULT_REGION }} update-kubeconfig --name ${{ secrets.TF_VAR_CLUSTER_NAME }}

      - name: Deploy Application
        if: github.event.inputs.action == 'deploy'
        run: |
          kubectl apply -f k8s/deployment.yaml
        working-directory: ./

      - name: Wait for LoadBalancer to be provisioned
        if: github.event.inputs.action == 'deploy'
        run: |
          export INGRESS_DNS=$(kubectl get ingress python-app-ingress -n default -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
          echo "Ingress DNS name: $INGRESS_DNS"
          echo "INGRESS_DNS=$INGRESS_DNS" >> $GITHUB_ENV

      - name: Clone the repository to update DNS record
        if: github.event.inputs.action == 'deploy'
        run: |
          sed -i "s|records = \[.*\]|records = [\"${{ env.INGRESS_DNS }}\"]|g" ./dns.tf

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.4.6

      - name: Apply Terraform Changes to Update CNAME Record
        if: github.event.inputs.action == 'deploy'
        run: |
          terraform init
          terraform plan -out=tfplan
          terraform apply -auto-approve
        # working-directory: ./terraformfiles

      # Destroy step executed only when "destroy" action is selected
      - name: Terraform Destroy
        if: github.event.inputs.action == 'destroy'
        run: |
          terraform init
          terraform plan -out=tfplan
          terraform destroy -auto-approve
        env:
          TF_VAR_cluster_name: ${{ secrets.TF_VAR_CLUSTER_NAME }}
